{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","actions.js","Constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searhfield","SearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","this","onRequestRobots","isPending","filteredRobots","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","payload","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.d46a2265.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card=({name,email,id}) => {\r\n\t\r\n\treturn (\r\n\r\n\t\t<div \r\n\t\tclassName= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='robots' src={`https://robohash.org/${id} 200x200`} />\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\r\n      </div>\r\n      </div>\r\n    );\r\n   }\r\n   export default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList= ({ robots }) => {\r\n\t\treturn ( \r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i) => { \r\n\t\t\t\t\treturn (\r\n\t\t<Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id}\r\n\t\t name={robots[i].name} \r\n\t\t email={robots[i].email}/>\r\n\t);\r\n\t})\r\n\t\t\t}\r\n</div>\r\n);\r\n\t}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searhfield,SearchChange}) => {\r\n\treturn  (\r\n\t\t<div className='pa2'>\r\n<input\r\nclassName='pa3 ba b--green bg-yellow' \r\ntype='search'\r\n placeholder='search robots'\r\nonChange={SearchChange}\r\n/>\r\n</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\nconst Scroll=(props)=> {\r\nreturn (\r\n<div style={{overflow: 'scroll',border:'5px solid black',height: '500px'}}>\r\n{props.children}\r\n</div>\r\n\t);\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from './CardList';\r\nimport {connect} from 'react-redux';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport{setsearchfield,requestRobots} from './actions';\r\n\r\nconst mapStateToProps = state => {\r\n\r\n\treturn {\r\n\t\tsearhfield:state.searchRobots.searhfield,\r\n\t\trobots:state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots,\r\n\t\terror:state.requestRobots.error\r\n\r\n\t}\r\n}\r\nconst mapDispatchToProps=(dispatch) => {\r\nreturn {\r\n\tonSearchChange:(event) => dispatch(setsearchfield(event.target.value)),\r\n\tonRequestRobots:() =>dispatch(requestRobots())\r\n}\r\n}\r\n\r\nclass App extends Component {\r\ncomponentDidMount()\r\n{\r\n   this.props.onRequestRobots();\r\n}\r\nonSearchChange=(event) => \r\n{\r\n this.setState({searhfield:event.target.value})\r\n\r\n}\r\n\r\n\trender()\r\n\t{\r\n\t\t\r\n\t\tconst {searhfield,onSearchChange,robots,isPending}=this.props;\r\n\t\tconst filteredRobots=robots.filter(robots => {\r\n\t\treturn robots.name.toLowerCase().includes(searhfield.toLowerCase());\r\n\t})\r\n\r\n\t\t\r\n\t\treturn !isPending ?\r\n\t\t\t <h1>loading</h1> :\r\n\t\r\n\t(\r\n\t\t<div className='tc'>\r\n\t\t<h1>Robot</h1>\r\n\t\t<SearchBox SearchChange={onSearchChange}/>\r\n\t\t<Scroll>\r\n    <CardList robots={filteredRobots} />\r\n    </Scroll>\r\n    </div>\r\n);\r\n}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\r\nCHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\nexport const setsearchfield=(text) => ({\r\ntype: CHANGE_SEARCH_FIELD,\r\npayload: text\r\n})\r\nexport const requestRobots=()=>(dispatch) => { \r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response=> response.json())\r\n  .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n  .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n\r\n\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_SUCCESS,\r\nREQUEST_ROBOTS_FAILED\r\n } from './Constants.js';\r\n\r\nconst initialStateSearch= {\r\n\tsearhfield:''\r\n}\r\nexport const searchRobots=(state=initialStateSearch,action={}) => {\r\n\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\treturn Object.assign({},state,{searhfield: action.payload});\r\n\t\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}\r\nconst initialStateRobots={\r\n\tisPending: false,\r\n\trobots:[],\r\n\terror:''\r\n}\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\nswitch(action.type) {\r\n\tcase REQUEST_ROBOTS_PENDING:\r\n\treturn Object.assign({},state,{isPending:true})\r\n\tcase REQUEST_ROBOTS_SUCCESS:\r\n\treturn Object.assign({},state,{robots:action.payload,isPending:false})\r\n\tcase REQUEST_ROBOTS_FAILED:\r\n\treturn Object.assign({},state,{error:action.payload,isPending:false})\r\n\tdefault:\r\n\treturn state;\r\n}\r\n}\r\n\r\n\r\n\t","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport{createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport{ searchRobots,requestRobots } from './reducers';\n\nconst logger=createLogger();\nconst rootReducer=combineReducers({searchRobots,requestRobots})\nconst store=\ncreateStore(rootReducer,applyMiddleware(thunkMiddleware,logger)) ;\n\n\nReactDOM.render(\n\t<Provider store={store}>\n\t<App/>\n\t</Provider>   ,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}